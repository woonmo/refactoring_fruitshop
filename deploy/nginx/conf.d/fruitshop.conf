# HTTP 요청 -> HTTPS 리다이렉트
server{
    listen 80;

    # 서버 이름
    server_name fruitshop.kro.kr;
    # HTTP 요청을 HTTPS 로 리다이렉트
    return 301 https://$host$request_uri;
}

# HTTPS 서버 설정
server {
    listen 443 ssl;
    # 서버 이름
    server_name fruitshop.kro.kr;


    # Certbot 인증서 경로
    ssl_certificate /etc/letsencrypt/live/fruitshop.kro.kr/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/fruitshop.kro.kr/privkey.pem; # managed by Certbot


    ##
    # 추후 리액트로 프론트 분리 시 /api/ 요청(스프링)과 / 요청(리액트)만 남기고 모두 삭제
    ##


    # api 요청 처리
    location /api/ {
        # 스프링 앱 컨테이너로 요청 전달: docker-compose.yml의 spring-app 서비스, 8080포트
        proxy_pass http://fruitshop:8080;
        # 요청 헤더 설정: 클라이언트 정보 유지
        proxy_set_header Host $host;    # 요청 호스트 이름 전달
        proxy_set_header X-Real-IP $remote_addr;    # 클라이언트의 실제 IP 전달
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시 경로 정보 추가
        proxy_set_header X-Forwarded-Proto $scheme; # 프로토콜(HTTP/HTTPS) 전달
    }

    # 주문서 페이지는 SSR 로 응답하도록
    location /orders/draft/ {
        # 스프링 앱 컨테이너로 요청 전달: docker-compose.yml의 spring-app 서비스, 8080포트
        proxy_pass http://fruitshop:8080;
        # 요청 헤더 설정: 클라이언트 정보 유지
        proxy_set_header Host $host;    # 요청 호스트 이름 전달
        proxy_set_header X-Real-IP $remote_addr;    # 클라이언트의 실제 IP 전달
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시 경로 정보 추가
        proxy_set_header X-Forwarded-Proto $scheme; # 프로토콜(HTTP/HTTPS) 전달
    }

    # 리액트 앱 정적 파일 제공
    location /static/ {
        proxy_pass http://fruitshop_front:80/static/;
    }

    # manifest.json 요청 처리
    location = /manifest.json {
        proxy_pass http://fruitshop_front:80/manifest.json;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # favicon.ico 요청 처리
    location = /favicon.ico {
        proxy_pass http://fruitshop_front:80/favicon.ico;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }


    # FRONT 응답 (주문상세 페이지)
    location /orders/ {
        proxy_pass http://fruitshop_front:80;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;    # 클라이언트의 실제 IP 전달
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시 경로 정보 추가
        proxy_set_header X-Forwarded-Proto $scheme; # 프로토콜(HTTP/HTTPS) 전달

        # SPA 라우팅 처리(삭제 시 루트경로(/))로 이관
        proxy_intercept_errors on;
        error_page 404 =200 /index.html;
    }

    # 루트경로(/) 로 들어오는 요청 처리
    location / {
        # 스프링 앱 컨테이너로 요청 전달: docker-compose.yml의 spring-app 서비스, 8080포트
        proxy_pass http://fruitshop:8080;
        # 요청 헤더 설정: 클라이언트 정보 유지
        proxy_set_header Host $host;    # 요청 호스트 이름 전달
        proxy_set_header X-Real-IP $remote_addr;    # 클라이언트의 실제 IP 전달
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 프록시 경로 정보 추가
        proxy_set_header X-Forwarded-Proto $scheme; # 프로토콜(HTTP/HTTPS) 전달
    }

}